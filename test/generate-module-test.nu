#!/usr/bin/env nu

# Generate a complete test file for a chuck-stack module
# This eliminates the need to think about test patterns for each new module

def main [
    module: string        # Module name (e.g., "item", "bp", "project")
    --prefix: string      # Two-letter test prefix (e.g., "si" for stk_item)
    --type-key: string    # Type search key if module has types
    --skip-types: bool    # Skip type tests if module has no types
    --has-json: bool      # Module supports --json parameter
] {
    let prefix = if ($prefix | is-empty) { $module | str substring 0..2 } else { $prefix }
    let test_name = $"test-($module).nu"
    
    let test_content = $"#!/usr/bin/env nu

# Test script for stk_($module) module
# Generated by generate-module-test.nu

# Test-specific suffix to ensure test isolation and idempotency
let chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"
let random_suffix = \(0..1 | each {|_| 
    let idx = \(random int 0..\($chars | str length | $in - 1\)\)
    $chars | str substring $idx..\($idx + 1\)
} | str join\)
let test_suffix = $\"_($prefix)\($random_suffix\)\"

# Import modules and assert
use ../modules *
use std/assert

# === Test 1: Basic creation ===
print \"=== Testing ($module) creation ===\"
let created = \(($module) new $\"Test ($module | str capitalize)\($test_suffix\)\"(if $type_key != null { $" --type-search-key ($type_key)" } else { "" })\)
assert \($created | is-not-empty\) \"Should create ($module)\"
assert \($created.uu | is-not-empty\) \"Should have UUID\"
assert \($created.name.0 | str contains $test_suffix\) \"Name should contain test suffix\"

# === Test 2: List ===
print \"=== Testing ($module) list ===\"
let list_result = \(($module) list\)
assert \($list_result | where name =~ $test_suffix | is-not-empty\) \"Should find created ($module)\"

# === Test 3: Get with string UUID ===
print \"=== Testing ($module) get with string UUID ===\"
let get_result = \($created.uu.0 | ($module) get\)
assert \($get_result.uu.0 == $created.uu.0\) \"Should get correct record\"

# === Test 4: Get with record input ===
print \"=== Testing ($module) get with record input ===\"
let record_result = \($created | first | ($module) get\)
assert \($record_result.uu.0 == $created.uu.0\) \"Should get from record\"

# === Test 5: Get with table input ===
print \"=== Testing ($module) get with table input ===\"
let table_result = \($created | ($module) get\)
assert \($table_result.uu.0 == $created.uu.0\) \"Should get from table\"

# === Test 6: Get with --uu parameter ===
print \"=== Testing ($module) get with --uu parameter ===\"
let param_result = \(($module) get --uu $created.uu.0\)
assert \($param_result.uu.0 == $created.uu.0\) \"Should get with --uu\"

# === Test 7: Get with empty table \(should fail\) ===
print \"=== Testing ($module) get with empty table ===\"
try {
    [] | ($module) get
    error make {msg: \"Empty table should have failed\"}
} catch {
    print \"  âœ“ Empty table correctly rejected\"
}

# === Test 8: Revoke ===
print \"=== Testing ($module) revoke ===\"
let revoked = \($created.uu.0 | ($module) revoke\)
assert \($revoked.is_revoked.0 == true\) \"Should be revoked\"

# === Test 9: List with --all ===
print \"=== Testing ($module) list --all ===\"
let all_list = \(($module) list --all | where name =~ $test_suffix\)
assert \($all_list | where is_revoked == true | is-not-empty\) \"Should show revoked records\"

(if not $skip_types { $"
# === Test 10: Types ===
print \"=== Testing ($module) types ===\"
let types = \(($module) types\)
assert \($types | is-not-empty\) \"Should have types\"
" } else { "" })

(if $has_json { $"
# === Test 11: JSON parameter ===
print \"=== Testing ($module) with JSON ===\"
let json_created = \(($module) new $\"JSON Test\($test_suffix\)\" --json '{\"test\": true}'\)
let json_detail = \($json_created.uu.0 | ($module) get\)
assert \($json_detail.record_json.0.test == true\) \"Should store JSON\"
" } else { "" })

\"=== All tests completed successfully ===\"
"

    # Save the generated test file
    $test_content | save $"suite/($test_name)"
    chmod +x $"suite/($test_name)"
    
    print $"Generated test file: suite/($test_name)"
    print "To run: nix-shell --run \"./suite/($test_name)\""
}